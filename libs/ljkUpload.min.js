
(function ($) { var LjkUpload = function (element) { this.element = element; }; LjkUpload.prototype = { isPc: function () { var userAgent = navigator.userAgent; var AgentsArray = ["Android", "iPhone", "SymbianOS", "Windows Phone", "iPad", "iPod"]; var flag = true; for (var i = 0; i < AgentsArray.length; i++) { if (userAgent.indexOf(AgentsArray[i]) > -1) { flag = false; break; } } return flag; }, ljkUpLoadAnimate: function (msg) { msg = msg ? msg : '请稍后'; var list = ""; for (var i = 1; i <= 12; i++) { list += "<div class='sk-circle" + i + " sk-child'></div>"; } var doms = $("" + "<div class='removeLoading jmcpopup modal' style='display: block'><div class='mask'><div class='loading'>" + "<div class='sk-circle'>" + list + "</div><p class='text-center fz18 color-white mt30'>" + msg + "</p></div></div>"); $("body").append(doms); }, ljkUpLoadAlert: function (msg, onHideHandler, title, showTime) { title = title ? title : '金珂提示你'; var $dom = $('<div class="jmcpopup modal" style="display:block"><div class="mask"></div><div class="jmcpopup-wrap modal-wrap ctrl-modal"><div class="modal-title"><h2 class="none">' + title + '</h2></div><table><tr><td><h1 class="none mt20">' + msg + '</h1></td></tr></table></div></div>'); $('body').append($dom); if (typeof showTime == 'undefined') { showTime = 1500; } else { showTime = Math.max(parseInt(showTime), 1500); } var i = setTimeout(function () { clearTimeout(i); setTimeout(function () { $dom.remove(); if (typeof (onHideHandler) == 'function') { onHideHandler(); } }, 500); $dom.css('opacity', 0); }, showTime); }, delete: function (ele) { ele.remove(); }, selectImg: function (options) { if (typeof options != "object") { return } options.fileSelectBtn.on("click", function () { options.fileBtn.click(); }); }, getBoundingClientRect: function (ele) { const gbc = ele.getBoundingClientRect(); const left = gbc.left; const top = gbc.top; return { left, top } }, moveImage: function (options) { if (typeof options != "object") { return } var options = $.extend({ ele: $('.move-image') }, options);var isPc = this.isPc(); var mouseOffsetX = 0, mouseOffsetY = 0, isDown = false; options.ele.on("mousedown touchstart", function (e) { var touche = isPc ? e : e.targetTouches[0]; isDown = true; mouseOffsetX = touche.pageX - ~~(this.getBoundingClientRect(options.ele.get(0)).left); mouseOffsetY = touche.pageY - ~~(this.getBoundingClientRect(options.ele.get(0)).top); }); options.ele.on("mousemove touchmove", function (e) { e.preventDefault(); var mouseX = 0, mouseY = 0; var touche = isPc ? e : e.targetTouches[0]; if (isDown === true) { mouseX = touche.pageX - mouseOffsetX; mouseY = touche.pageY - mouseOffsetY; options.ele.css({ top: mouseY + "px", left: mouseX + "px" }) } }); options.ele.on("mouseup touchend", function (e) { e.preventDefault(); isDown = false; }); options.ele.on("mouseout", function (e) { e.preventDefault(); isDown = false; }); }, showImage: function (options) { var defaults = { maxSize: 1024 }; var options = $.extend(defaults, options); if (typeof options != "object") { return } var _this = this; _this.selectImg(options); options.fileBtn.change(function () { if (!window.FileReader) { _this.ljkUpLoadAlert("浏览器版本过低"); return; } if (this.files.length && this.files.length > 1) { _this.ljkUpLoadAlert("只能上传1张图片:)"); return; } var files = Array.prototype.slice.call(this.files); files.forEach(function (file, i) { var fileType = /\/(?:jpeg|png|gif)/i; var type = file.type.match(/image\/(\w*)/)[1]; if (!fileType.test(file.type)) { _this.ljkUpLoadAlert("不支持" + type + "格式的图片哟"); return; } if (options.maxSize != 'undefined' && typeof options.maxSize == 'number') { var fileSize = file.size / 1024; if (fileSize > options.maxSize) { _this.ljkUpLoadAlert("抱歉,图片最大为 " + options.maxSize + " KB"); return; } } var reader = new FileReader(); reader.onprogress = function () { _this.ljkUpLoadAnimate("读取中,请稍后"); }; reader.onerror = function () { _this.delete($(".removeLoading")); _this.ljkUpLoadAlert("读取失败"); }; reader.onabort = function () { _this.delete($(".removeLoading")); _this.ljkUpLoadAlert("网络异常!"); }; reader.onload = function () { _this.delete($(".removeLoading")); var result = this.result; _this.loadImage(result).then(image => { options.fileSelectBtn.addClass("success-linear"); options.showEle.html('').append(image).removeClass("hasImg"); }).catch(e => { throw new Error(e); });var $range = $('input[type="range"]'), scale = Number($range.val()); options.showEle.get(0).onmousewheel = function (e) { var target, ee = e || window.event; target = ee.delta ? ee.delta : ee.wheelDelta; if (target > 0) { scale += 0.05; scale = Math.min(scale, 3.0); $range.val(scale); _this.ToScale(options.showEle, scale) } else if (target < 0) { scale -= 0.05; scale = Math.max(0, scale); $range.val(scale); _this.ToScale(options.showEle, scale) } else { return false; } }; options.fileBtn.blur(); }; reader.readAsDataURL(file); }) }); }, loadImage: function (src) { return new Promise((res, rej) => { let img = new Image(); img.src = src; img.onload = () => { res(img) };img.onerror = (e) => { rej(e) } }) }, rangeToScale: function (options) { if (typeof options != "object") { return; } var _this = this; var scale = Number(options.range.val()); options.range.on("mousemove touchmove", function (e) { var _this_ = $(this); scale = Number(_this_.val()); _this.ToScale(options.ele, scale); }).prev().on("click touchstart", function () { scale -= 0.01; options.range.val(scale); _this.ToScale(options.ele, scale) }).next().next().on("click touchstart", function () { scale += 0.01; options.range.val(scale); _this.ToScale(options.ele, scale) }); }, ToScale: function (ele, scale) { ele.css({ "-webkit-transform": "scale(" + scale + ")", "-moz-transform": "scale(" + scale + ")", "-ms-transform": "scale(" + scale + ")", "-o-transform": "scale(" + scale + ")", "transform": "scale(" + scale + ")" }) }, clipImage: function (options) { var _this = this; if (typeof options != "object") { return } var defaults = { uploadBtn: $(".upload-upload-btn"), uploadImageBox: $(".move-image"), clipImage: $(".clip-image"), range: $("#range") }; var options = $.extend(defaults, options); _this.canvas = document.createElement("canvas");options.uploadBtn.on("click", function () { try { if (options.uploadImageBox.hasClass("hasImg")) { _this.ljkUpLoadAlert("请选择图片"); return; } var $img = options.uploadImageBox.find("img"), cxt = _this.canvas.getContext("2d"), $width = options.clipImage.width(), $height = options.clipImage.height(); _this.canvas.width = $width; _this.canvas.height = $height; var scale = options.range.val() || options.range.value, sx = ~~(options.clipImage.offset().left - options.uploadImageBox.offset().left), sy = ~~(options.clipImage.offset().top - options.uploadImageBox.offset().top); cxt.drawImage($img.get(0), sx / scale, sy / scale, $width / scale, $height / scale, 0, 0, $width, $height); var imageType = (options.quality && typeof (options.quality) === 'number') ? 'image/jpeg' : 'image/png';var Src = _this.canvas.toDataURL(imageType, Number(options.quality)); delete this.canvas; if (typeof options.clipSuccess != "function") { throw new Error("请使用clipSuccess回调函数:("); } options.clipSuccess(Src); } catch (e) { options.clipError('error:' + e); } }) }, upload: function (options) { var defaults = { fileBtn: $('input[type="file"]'), fileSelectBtn: $('upload-select-btn'), showEle: $('.move-image'), maxSize: 1024, range: $("#range"), success: function () { }, error: function () { } };var options = $.extend(defaults, options);this.moveImage({ ele: options.moveEle });this.showImage({ fileSelectBtn: options.fileSelectBtn, fileBtn: options.fileBtn, showEle: options.showEle, maxSize: options.maxSize });this.rangeToScale({ range: options.range, ele: options.showEle });this.clipImage({ range: options.range, quality: options.quality, clipSuccess: function (Src) { options.success(Src) }, clipError: function (e) { options.error(e) } }) }, fileTypeRegExp: function (fileType, reg) { let regExp = new RegExp('.*\/(?:' + fileType + ')$', 'i'); return regExp.test(reg) } }; window['LjkUpload'] = LjkUpload; })(jQuery);